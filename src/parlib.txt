Introduction
------------

Both the master worker (or main thread) program and the slave workers
must include parlib.js.

(More here)


Shared heap
-----------
To initialize the shared heap, do this:

(1) On the master, create a shared heap and set it up:

      var myheap = new SharedArrayBuffer(4*1024*1024);    // 4MB
      SharedHeap.setup(myheap, "master");

(2) Send the shared heap to the slaves:

      w.postMessage(myheap, [myheap]);

(3) Each slave receives the heap in its event handler and also sets it
    up locally:

      function (ev) {
        var myheap = ev.data;
        SharedHeap.setup(myheap, "slave");
      }

Objects can now be allocated in the shared heap and communicated among
all the workers, as described in the following.

SharedHeap.pid is a process ID that is unique to the worker.  The
master worker always has pid=0.


Shared variable objects
-----------------------
There is a shared variable type called "SharedVar".  A new shared
variable (which is also a shared object) is created in a worker with
"new SharedVar.T()" where T is one of the predefined types: ref,
int32, and float64.  For example,

   var v = new SharedVar.float64()

To write a value into a shared variable use "put()":

   v.put(3.14159)

To read a value from a shared variable use "get()":

   var w = v.get()

Values of SharedVar.ref may be null or shared objects: not any other
non-shared-object value.

(SharedVar put and get are memory synchronization points.)


Bootstrapping communication among workers
-----------------------------------------
There is a pre-defined SharedVar.ref called "sharedVar0", which can be
used among workers to communicate setup information, as follows:

(1) On the master, before sharing the heap with the slaves, create a
    shared data structure containing communication instructions and
    place it in sharedVar0:

      sharedVar0.put(obj)

(2) On the slave, after initializing the shared heap, get those
    instructions from the shared variable:

      var obj = sharedVar0.get()

The initial value of sharedVar0 is null.


Array objects
-------------
Primitive shared memory array types are constructed with the
SharedArray constructors, for predefined types int32, float64, and
ref.

(1) On any worker, create an array of int32 like this:

      var a = new SharedArray.int32(100);

    The type of a in this case is SharedInt32Array, which will
    benefit from full JIT optimization and can be accessed using
    standard element access syntax:

      a[0] = 37;
      a[1] = 42 + a[0];

(2) Send the array to another worker via a shared variable, for
    example:

      // Sender
      sharedVar0.put(a);
    ...
      // Receiver
      var x = sharedVar0.get()

SharedArray.ref is a little bit different.  To read an element, use the
get() method:

   v = a.get(index)

To write an element (or null), use the put method:

  a.put(index, value)

It is *possible* to use the [] operator on SharedArray.ref; the values
will appear to be integers.  Don't do this.

Shared array read and write are /not/ synchronization points.


Lock objects
------------
There is a predefined "Lock" object type representing a shared-memory
mutex.  It has simple methods called "lock()" and "unlock()", and also
a method called "invoke()" that takes a thunk and invokes a thunk with
the lock held.

Locks are not (at present) recursive.

Lock and unlock operations are memory synchronization points.  (To
be discussed.)


Structure types and structure objects
-------------------------------------

The object "SharedStruct" contains types and type constructors for
shared structure values, somewhat similar to TypedObjects.  To
construct a 3D point structure:

    var Point3D = SharedStruct.Type("Point3D", {x:SharedStruct.int32,
                                                y:SharedStruct.int32,
                                                z:SharedStruct.int32})

The name tag must be globally unique.  Types with the same tag in
different workers must have the same structure.

Other types are SharedStruct.float64, SharedStruct.atomic_int32,
SharedStruct.atomic_float64, SharedStruct.ref, and
SharedStruct.atomic_ref.

A structure instance has getters and setters for the various fields:
if p is a Point32 then p.x will read the x field and p.y=37 will set
the y field to 37.

For atomic fields "x" there are also methods add_x(v) to atomically
add to the field, and compareExchange_x(oldval,newval) to
compare-and-exchange values.  Both return the old value of the cell.

A structure instance is constructed by passing an object literal for
the field values:

    var p = new Point32({x:10, y:20, z:30})

If the initializer object is absent, or any field in it is absent,
then the structure field is initialized with an appropriate zero value
or null pointer.  Superflous fields in the initializer object are
ignored.

Special field names trigger special behavior in the type system:

- A field whose name starts with '_' is an "internal property", it
  will be initialized to zero/null regardless of whether a value is
  present for it in the initializer.

- A field whose name starts with '$' is a "plain data property":
   - the field cannot be atomic
   - no getter or setter is generated for it
   - it is always zero/null-initialized
   - the word offset of the field within the structure is recorded
     as a property on the constructor, named as the field (see eg
     the Lock type's implementation)


Odds and ends
-------------
If a shared object is sent to another worker and then back to the
originator it will usually come back as a JS object that has a
different identity (though it references the same underlying shared
memory).  To compare two shared objects a and b for shared-memory
identity, use this:

      SharedHeap.equals(a,b)


Storage management [NOT IMPLEMENTED]
------------------------------------

Storage management is currently manual: *All* shared objects in the
local heap are retained until you call "release" on them.  If you drop
a pointer to a shared object, the shared storage for that object will
leak.

Once all references to an object in the shared heap are gone, that
object can be garbage collected.


Discussion: performance
-----------------------

A new front object is created each time we reference a ref property.
This is bad.  But the front objects are quite small, and (by and
large) have only the _base property on them, so it may not be /very/
bad.

We see this at work on the Cond type.  Cond -> Lock.  So is there a
pointer from the Cond front object to the Lock front object, or does
every reference to the latter have to go through the shared storage
and reconstruct a new front object for the lock every time?

Basically the constructor protocols require the latter: it becomes
awkward, if a shared object can be instantiated several times, to have
any kind of state in the front object, unless that state is just a
cache of immutable data.



Discussion: strings
-------------------

TBI.  Are shared strings immutable things like normal strings or are
they just SharedUint16Arrays?
